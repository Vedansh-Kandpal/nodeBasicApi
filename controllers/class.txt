// get all tours
exports.getAllTours = async (req, res) => {

    try {
        // destructuring the array
        const queryObj = { ...req.query };


        // 1) filter



        // const excludesFields = ['page', 'sort', 'limit', 'fields'];
        // excludesFields.forEach(el => delete queryObj[el])
        // console.log(req.query, queryObj)

        // find all tour
        // const tours = await Tour.find()

        // filter data behalf of the query string
        // const tours = await Tour.find(req.query)

        // find the data exclude the extra queryString
        // const query = Tour.find(queryObj);




        // 2) advance filter (like gte(grater then equal),gt(grater then),lte(less then equal),lt(less then))






        // to perform these kind of filter the js syntax is {name:'testName',price:{$gte:5000}} but from query string we get it like {name:'testName',price:{gte:5000}} basically $ is miss from the gte so we need to add $ that's why we use regular expression

        // first we need to convert obj to string so

        // let queryStr = JSON.stringify(queryObj);
        // // now we replace
        // queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`)

        // now convert string to obj
        // console.log(JSON.parse(queryStr))

        // find the data exclude the extra queryString
        // let query = Tour.find(JSON.parse(queryStr));
        // console.log(query)


        // 3) sorting



        // sort by price
        // if (req.query.sort) {
        //     //  if we how multiple query string to sort then first we need to convert it into a array so

        //     console.log(req.query.sort)

        //     const sortBy = req.query.sort.split(',').join(' ');

        //     query = query.sort(sortBy)

        //     // when sort by only one field
        //     // query = query.sort(req.query.sort)
        // }

        // 4) field limiting


        //send only few field

        // if (req.query.fields) {
        //     const fields = req.query.fields.split(',').join(' ');
        //     query = query.select(fields);
        // } else {
        //     query = query.select('-__v') // - mean remove __v field from result
        // }


        // 4) pagination


        // let page = req.query.page * 1 || 1; // page no
        // let limit = req.query.limit * 1 || 3; //data shows on page at one time
        // let skip = (page - 1) * limit;


        // query = query.skip(skip).limit(limit)

        // if (req.query.page) {
        //     const numTours = await Tour.countDocuments();
        //     if (skip >= numTours) throw new Error('This page does not exist');
        // }

        //execute query
        // const tours = await query;

        var features = new APIFeatures(Tour.find(), req.query).filter().sort().limitFields().pagination();

        const tours = await features.query;

        res.status(200).json({
            status: 'success',
            result: tours.length,
            data: {
                tours,
            },
        });
    }

    catch (err) {
        res.status(400).json({
            status: "fail",
            message: err
        })
    }

}
